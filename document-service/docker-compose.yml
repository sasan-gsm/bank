version: '3.8'

services:
  # Document Service - Production
  document-service:
    build:
      context: .
      target: runtime
    container_name: document-service
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://document_user:${DOCUMENT_DB_PASSWORD:-document_secure_pass}@document-db:5432/document_db
      - REDIS_URL=redis://redis:6379/2
      - AUTH_SERVICE_URL=http://auth-service:8000
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin}
      - MINIO_BUCKET_NAME=documents
      - MINIO_SECURE=false
      - MAX_FILE_SIZE=50MB
      - ALLOWED_EXTENSIONS=pdf,doc,docx,xls,xlsx,jpg,jpeg,png,gif,txt
      - CELERY_BROKER_URL=redis://redis:6379/2
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - document_data:/app/data
      - document_logs:/app/logs
      - document_uploads:/app/uploads
      - document_thumbnails:/app/thumbnails
    ports:
      - "8003:8003"
    depends_on:
      document-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - document-network
      - bank-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.documents.rule=Host(`api.yourbank.com`) && PathPrefix(`/api/v1/documents`)"
      - "traefik.http.routers.documents.middlewares=auth,rate-limit,cors"
      - "traefik.http.services.documents.loadbalancer.server.port=8003"
      - "traefik.docker.network=bank-network"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Document Service Worker
  document-worker:
    build:
      context: .
      target: runtime
    container_name: document-worker
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://document_user:${DOCUMENT_DB_PASSWORD:-document_secure_pass}@document-db:5432/document_db
      - REDIS_URL=redis://redis:6379/2
      - AUTH_SERVICE_URL=http://auth-service:8000
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin}
      - MINIO_BUCKET_NAME=documents
      - MINIO_SECURE=false
      - CELERY_BROKER_URL=redis://redis:6379/2
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - document_data:/app/data
      - document_logs:/app/logs
      - document_uploads:/app/uploads
      - document_thumbnails:/app/thumbnails
    depends_on:
      document-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - document-network
    restart: unless-stopped
    command: ["python", "worker.py"]

  # PostgreSQL Database
  document-db:
    image: postgres:15-alpine
    container_name: document-db
    environment:
      - POSTGRES_DB=document_db
      - POSTGRES_USER=document_user
      - POSTGRES_PASSWORD=${DOCUMENT_DB_PASSWORD:-document_secure_pass}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - document_db_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    networks:
      - document-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U document_user -d document_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: document-minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY:-minioadmin}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - document-network
    restart: unless-stopped
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 30s

  # MinIO Client for bucket initialization
  minio-init:
    image: minio/mc:latest
    container_name: document-minio-init
    depends_on:
      minio:
        condition: service_healthy
    networks:
      - document-network
    entrypoint: >
      /bin/sh -c "
      mc alias set myminio http://minio:9000 ${MINIO_ACCESS_KEY:-minioadmin} ${MINIO_SECRET_KEY:-minioadmin};
      mc mb myminio/documents;
      mc policy set public myminio/documents;
      exit 0;
      "
    profiles:
      - init

  # Redis for caching and message broker
  redis:
    image: redis:7-alpine
    container_name: document-redis
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    volumes:
      - document_redis_data:/data
    ports:
      - "6381:6379"
    networks:
      - document-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s

volumes:
  document_db_data:
    driver: local
  document_redis_data:
    driver: local
  minio_data:
    driver: local
  document_data:
    driver: local
  document_logs:
    driver: local
  document_uploads:
    driver: local
  document_thumbnails:
    driver: local

networks:
  document-network:
    driver: bridge
    internal: true
  bank-network:
    external: true
    name: bank-network